import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from model import *
from dataloader import *
import datetime
from validate import *
from show import *

def train(model, train_loader, optimizer, criterion, device):
    model.train()
    model.to(device)

    train_loss = 0
    correct = 0
    total = 0

    for batch_idx, (inputs, targets) in enumerate(train_loader):
        inputs, targets = inputs.to(device), targets.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        train_loss += loss.item()
        _, predicted = outputs.max(1)
        total += targets.size(0)
        correct += predicted.eq(targets).sum().item()
        print("batch_idx:",batch_idx)
    # Calculate average training loss and accuracy for the epoch
    train_loss /= len(train_loader)
    accuracy = 100. * correct / total

    return train_loss, accuracy


def trainAndValidate(model, train_batch, train_total, test_batch, test_total, lr, epochs, device):
    optimizer = optim.Adam(model.parameters(), lr=lr)
    criterion = nn.CrossEntropyLoss()
    train_loader=dl(train_batch,train_total)
    test_loader=vl(test_batch,test_total)
    
    train_loss_history = []
    train_acc_history = []
    test_acc_history = []

    for epoch in range(epochs):
        train_loss, train_accuracy = train(model, train_loader, optimizer, criterion, device)
        test_accuracy = validate(model, test_loader, criterion, device)

        train_loss_history.append(train_loss)
        train_acc_history.append(train_accuracy/100)
        test_acc_history.append(test_accuracy/100)

        print('Epoch: {} | Train Loss: {:.3f} | Train Acc: {:.3f}% | Test Acc: {:.3f}%'
              .format(epoch+1, train_loss, train_accuracy, test_accuracy))

        # Save the model checkpoint after every epoch
        # torch.save(model.state_dict(), 'model_epoch_{}.pt'.format(epoch+1))
    return train_loss_history, train_acc_history, test_acc_history


if __name__=='__main__':
    input_dim = 32
    hidden_dim = 32
    output_dim = 8
    num_layers = 1
    num_heads = 1
    dropout = 0.1
    model = TransformerClassifier(input_dim, hidden_dim, output_dim, num_layers, num_heads, dropout)
    train_batch=6
    train_total=120
    test_batch=6
    test_total=120
    lr=0.003
    epochs=3
    device='cuda'

    # state_dict = torch.load("output/model_2023-05-01_00-12-46.pt")
    # model.load_state_dict(state_dict)

    train_loss, train_acc, test_acc=trainAndValidate \
    (model,train_batch,train_total,test_batch,test_total,lr,epochs,device)
    show_figure(train_loss, train_acc, test_acc)
    now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    new_filename = "model_" + now + ".pt"
    torch.save(model.state_dict(), "output/" + new_filename)