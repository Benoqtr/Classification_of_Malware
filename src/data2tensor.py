from gensim.models import Word2Vec
import pickle
import numpy as np
import torch
import matplotlib.pyplot as plt


def convert_list_to_word2vec(file_api_list):
    model = Word2Vec.load("src/w2v32.model")
    vectors = []
    for word in file_api_list:
        vectors.append(model.wv[word])
    if len(vectors) == 0:
        return None
    else:
        vectors = torch.tensor(vectors)
        return vectors

def padding_tensor(tensr,N) :
    new_tensor = torch.zeros(N, 32)
    new_tensor[:tensr.shape[0]] = tensr
    return new_tensor


if __name__ == '__main__':

    with open('src/adjusted_files.pkl', 'rb') as f:
        labels = pickle.load(f)
        # files = pickle.load(f)

    with open('src/adjusted_test_files.pkl', 'rb') as f:
        files = pickle.load(f)    

    label_tensor = torch.tensor(labels)
    file_name = r"src\tensor\label_tensor.pt"
    torch.save(label_tensor, file_name)

    sequences = []
    batch_size =15000  # 每个组的大小
    num_batches = len(files) // batch_size  # 组的数量

    for i in range(num_batches+1):
        start_index = i * batch_size
        end_index = start_index + batch_size
        batch_files = files[start_index:end_index]
        batch_vec = []
        for index ,file in enumerate( batch_files):
            print(index)
            batch_vec.append(padding_tensor(convert_list_to_word2vec(file),6000))
        padded_tensor = torch.stack(batch_vec, dim=0)

        # 生成唯一的文件名
        # file_name = "train_tensor_%d.pt" % i
        file_name = "train_tensor_test.pt"
        torch.save(padded_tensor, "src/tensor/"+file_name)




