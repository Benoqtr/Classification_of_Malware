import pandas as pd
import torch
from model import *

state_dict = torch.load('model_4281.pt')

model = TransformerClassifier(10,1) # Replace with your actual model class and constructor
model.load_state_dict(state_dict)

# Load the input tensor
input_tensor = torch.load('output_tensor')

# Define the batch size
batch_size = 32

# Split the input tensor into smaller tensors
input_chunks = torch.chunk(input_tensor, batch_size, dim=0)

# Create an empty list to store output probabilities
output_probs = []

# Use model in evaluation mode
model.eval()

# Iterate over the batches of input tensors
with torch.no_grad():
    for batch in input_chunks:
        # Get output probabilities for the batch
        output = model(batch)
        output_probs.append(output.tolist())  # Convert tensor to list and add to the list of output probabilities

# Flatten the list of output probabilities
output_probs = [p for batch in output_probs for p in batch]

# Create a DataFrame
file_ids = [i+1 for i in range(len(output_probs))]
df = pd.DataFrame({'file_id': file_ids, 'prob0': [p[0] for p in output_probs], 'prob1': [p[1] for p in output_probs], 
                   'prob2': [p[2] for p in output_probs], 'prob3': [p[3] for p in output_probs], 
                   'prob4': [p[4] for p in output_probs], 'prob5': [p[5] for p in output_probs], 
                   'prob6': [p[6] for p in output_probs], 'prob7': [p[7] for p in output_probs]})

# 将 prob0-7 中的最大值改为 1，其他改为 0
df.iloc[:, 1:] = df.iloc[:, 1:].apply(lambda row: pd.Series([1 if i == row.max() else 0 for i in row]), axis=1)


# Write the DataFrame to a CSV file
df.to_csv('results.csv', index=False, float_format='%.5f')

